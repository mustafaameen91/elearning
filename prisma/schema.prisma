// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  idUser                Int                    @id @default(autoincrement())
  userName              String                 @db.VarChar(220)
  password              String                 @db.VarChar(220)
  phone                 String                 @unique @db.VarChar(220)
  province              Province               @relation(fields: [provinceId], references: [idProvince])
  provinceId            Int
  role                  Role                   @relation(fields: [roleId], references: [idRole])
  roleId                Int
  countryCode           String                 @default("+964") @db.VarChar(220)
  canLogin              Boolean                @default(true)
  playerId              String                 @default("0") @db.VarChar(220)
  distributorInfo       DistributorInfo?
  teacherInfo           TeacherInfo?
  studentInfo           StudentInfo?
  TeacherAssistanceInfo TeacherAssistanceInfo?
  Library               Library[]
  Course                Course[]
  Homework              Homework[]
  CourseVideo           CourseVideo[]
  VideoAttachment       VideoAttachment[]
  VideoComment          VideoComment[]
  reportComment         reportComment[]
  Quiz                  Quiz[]
  StudentCourse         StudentCourse[]
  GlobalLibrary         GlobalLibrary[]
  PromoCode             PromoCode[]
  UsedCode              UsedCode[]
  StudentAchievements   StudentAchievement[]
  HomeworkAnswer        HomeworkAnswer[]
  Subject               Subject[]
  Favorites             Favorites[]
  CourseDistributor     CourseDistributor[]
  UserSession           UserSession[]
  AssistanceTeacher     AssistanceTeacher[]    @relation("teacher")
  AssistanceTeachers    AssistanceTeacher[]    @relation("assistance")
  WatchVideos           WatchVideos[]
  CourseRating          CourseRating[]
  StudentGroup          StudentGroup[]
  HomeWorkMark          HomeWorkMark[]
}

model Avatar {
  idAvatar  Int      @id @default(autoincrement())
  imagePath String   @db.VarChar(220)
  createdAt DateTime @default(now())
}

model Role {
  idRole   Int    @id @default(autoincrement())
  roleName String @db.VarChar(220)
  Users    User[]
}

model Province {
  idProvince   Int    @id @default(autoincrement())
  provinceName String @db.VarChar(220)
  Users        User[]
}

model DistributorInfo {
  idDistributor    Int    @id @default(autoincrement())
  lang             String @db.VarChar(220)
  lat              String @db.VarChar(220)
  libraryName      String @db.VarChar(220)
  distributorPhoto String @db.VarChar(220)
  distributorBio   String @db.Text
  user             User   @relation(fields: [userId], references: [idUser])
  userId           Int    @unique
}

model TeacherInfo {
  idTeacher  Int    @id @default(autoincrement())
  specialty  String @db.VarChar(220)
  schoolName String @db.VarChar(220)
  photoPath  String @db.VarChar(220)
  bio        String @db.Text
  user       User   @relation(fields: [userId], references: [idUser])
  userId     Int    @unique
}

model StudentInfo {
  idStudent     Int             @id @default(autoincrement())
  schoolName    String          @db.VarChar(220)
  grade         Float
  dob           String          @db.VarChar(220)
  photoPath     String          @default("attachment/photo6.png") @db.VarChar(220)
  class         Class           @relation(fields: [classId], references: [idClass])
  classId       Int
  user          User            @relation(fields: [userId], references: [idUser])
  userId        Int             @unique
  StudentCourse StudentCourse[]
}

model AssistanceTeacher {
  idAssistanceTeacher Int  @id @default(autoincrement())
  teacher             User @relation("teacher", fields: [teacherId], references: [idUser])
  teacherId           Int
  assistance          User @relation("assistance", fields: [assistanceId], references: [idUser])
  assistanceId        Int
}

model HomeworkAnswer {
  idHomeworkAnswer Int      @id @default(autoincrement())
  homework         Homework @relation(fields: [homeworkId], references: [idHomework])
  homeworkId       Int
  user             User     @relation(fields: [userId], references: [idUser])
  userId           Int
  answerPath       String
  createdAt        DateTime @default(now())
}

model HomeWorkMark {
  idHomeworkMark Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [idUser])
  userId         Int
  homework       Homework @relation(fields: [homeworkId], references: [idHomework])
  homeworkId     Int
  mark           Int
  createdAt      DateTime @default(now())

}

model TeacherAssistanceInfo {
  idTeacherAssistence Int     @id @default(autoincrement())
  financialDetails    Boolean
  user                User    @relation(fields: [userId], references: [idUser])
  userId              Int     @unique
}

model GlobalLibrary {
  idLibrary    Int      @id @default(autoincrement())
  title        String   @db.VarChar(220)
  subTitle     String   @db.VarChar(220)
  documentPath String   @db.VarChar(220)
  downloaded   Int
  user         User     @relation(fields: [createdBy], references: [idUser])
  createdBy    Int
  createdAt    DateTime @default(now())
}

model Library {
  idLibrary    Int      @id @default(autoincrement())
  title        String   @db.VarChar(220)
  subTitle     String   @db.VarChar(220)
  documentPath String   @db.VarChar(220)
  downloaded   Int
  course       Course   @relation(fields: [courseId], references: [idCourse])
  courseId     Int
  user         User     @relation(fields: [createdBy], references: [idUser])
  createdBy    Int
  createdAt    DateTime @default(now())
}

model StudentAchievement {
  idStudentAchievement Int     @id @default(autoincrement())
  course               Course  @relation(fields: [courseId], references: [idCourse])
  courseId             Int
  average              Float
  user                 User    @relation(fields: [userId], references: [idUser])
  userId               Int
  shearing             Boolean
}

model UsedCode {
  idUsedCode Int       @id @default(autoincrement())
  promoCode  PromoCode @relation(fields: [promoId], references: [idPromoCode])
  promoId    Int
  user       User      @relation(fields: [userId], references: [idUser])
  userId     Int
  createdAt  DateTime  @default(now())
}

model PromoCode {
  idPromoCode    Int        @id @default(autoincrement())
  code           String     @unique @db.VarChar(220)
  usedCount      Int
  discountAmount Float
  user           User       @relation(fields: [userId], references: [idUser])
  userId         Int
  course         Course     @relation(fields: [courseId], references: [idCourse])
  courseId       Int
  createdAt      DateTime   @default(now())
  UsedCode       UsedCode[]
}

model Course {
  idCourse            Int                  @id @default(autoincrement())
  courseTitle         String               @db.VarChar(220)
  courseDescription   String               @db.VarChar(220)
  courseRate          Float                @default(0.0)
  coursePrice         Float
  platformPrice       Float
  teleChannel         String               @default("https://t.me/kattwa") @db.VarChar(220)
  iapId               String               @default("") @db.VarChar(220)
  coursePath          String               @db.VarChar(220)
  class               Class                @relation(fields: [classId], references: [idClass])
  classId             Int
  user                User                 @relation(fields: [createdBy], references: [idUser])
  createdBy           Int
  createdAt           DateTime             @default(now())
  subject             Subject              @relation(fields: [subjectId], references: [idSubject])
  subjectId           Int
  Library             Library[]
  Homework            Homework[]
  CourseVideo         CourseVideo[]
  StudentCourse       StudentCourse[]
  PromoCode           PromoCode[]
  StudentAchievements StudentAchievement[]
  Favorites           Favorites[]
  CourseDistributor   CourseDistributor[]
  CourseRating        CourseRating[]
  Group               Group[]
}

model CourseDistributor {
  idCourseDistributor Int               @id @default(autoincrement())
  course              Course            @relation(fields: [courseId], references: [idCourse])
  courseId            Int
  user                User              @relation(fields: [distributorId], references: [idUser])
  distributorId       Int
  distributorStatus   DistributorStatus @default(PENDING)
  createdAt           DateTime          @default(now())
}

enum DistributorStatus {
  PENDING
  ACCEPTED
  CANCELLED
}

model UserSession {
  idUserSession Int      @id @default(autoincrement())
  user          User     @relation(fields: [studentId], references: [idUser])
  studentId     Int
  deviceId      String   @unique @db.VarChar(220)
  createdAt     DateTime @default(now())

}

model Favorites {
  idFavorites Int      @id @default(autoincrement())
  student     User     @relation(fields: [studentId], references: [idUser])
  studentId   Int
  course      Course   @relation(fields: [courseId], references: [idCourse])
  courseId    Int
  createdAt   DateTime @default(now())
}

model Subject {
  idSubject    Int      @id @default(autoincrement())
  subjectName  String   @db.VarChar(220)
  subjectImage String   @db.VarChar(220)
  class        Class    @relation(fields: [classId], references: [idClass])
  classId      Int
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [createdBy], references: [idUser])
  createdBy    Int
  Course       Course[]
}

model Class {
  idClass     Int           @id @default(autoincrement())
  className   String        @db.VarChar(220)
  classImage  String        @db.VarChar(220)
  StudentInfo StudentInfo[]
  Course      Course[]
  Subject     Subject[]
}

model Homework {
  idHomework       Int              @id @default(autoincrement())
  homeworkTitle    String           @db.VarChar(220)
  homeworkSubTitle String           @db.VarChar(220)
  homeworkPath     String           @db.VarChar(220)
  course           Course           @relation(fields: [courseId], references: [idCourse])
  courseId         Int
  user             User             @relation(fields: [createdBy], references: [idUser])
  createdBy        Int
  homeworkType     Int              @default(1)
  createdAt        DateTime         @default(now())
  expireDate       DateTime         @default(now())
  HomeworkAnswer   HomeworkAnswer[]
  HomeWorkMark     HomeWorkMark[]
}

model CourseVideo {
  idCourseVideo    Int               @id @default(autoincrement())
  videoTitle       String            @db.VarChar(220)
  videoLink        String            @db.VarChar(220)
  secondVideoLink  String            @default("link") @db.VarChar(220)
  videoDescription String            @db.VarChar(220)
  course           Course            @relation(fields: [courseId], references: [idCourse])
  courseId         Int
  user             User              @relation(fields: [createdBy], references: [idUser])
  createdBy        Int
  videoPhoto       String            @default("photo") @db.VarChar(220)
  unlockAt         DateTime          @default(now())
  createdAt        DateTime          @default(now())
  VideoAttachment  VideoAttachment[]
  VideoComment     VideoComment[]
  Quiz             Quiz[]
  WatchVideos      WatchVideos[]
}

model VideoAttachment {
  idVideoAttachment Int         @id @default(autoincrement())
  attachmentTitle   String      @db.VarChar(220)
  attachmentPath    String      @db.VarChar(220)
  video             CourseVideo @relation(fields: [videoId], references: [idCourseVideo])
  videoId           Int
  user              User        @relation(fields: [createdBy], references: [idUser])
  createdBy         Int
  createdAt         DateTime    @default(now())
}

model VideoComment {
  idVideoComment Int             @id @default(autoincrement())
  userComment    String          @db.Text
  commentTime    String          @db.VarChar(220)
  courseVideo    CourseVideo     @relation(fields: [videoId], references: [idCourseVideo])
  videoId        Int
  parentId       Int
  user           User            @relation(fields: [createdBy], references: [idUser])
  createdBy      Int
  createdAt      DateTime        @default(now()) @db.Timestamp(0)
  reportComment  reportComment[]
}

model reportComment {
  idReportComment Int          @id @default(autoincrement())
  videoComment    VideoComment @relation(fields: [commentId], references: [idVideoComment])
  commentId       Int
  user            User         @relation(fields: [createdBy], references: [idUser])
  createdBy       Int
  createdAt       DateTime     @default(now())
}

model Quiz {
  idQuiz       Int         @id @default(autoincrement())
  quizQuestion String      @db.VarChar(220)
  courseVideo  CourseVideo @relation(fields: [videoId], references: [idCourseVideo])
  videoId      Int
  user         User        @relation(fields: [createdBy], references: [idUser])
  createdBy    Int
  createdAt    DateTime    @default(now())
  Choice       Choice[]
}

model Choice {
  idChoice       Int     @id @default(autoincrement())
  questionChoice String  @db.VarChar(220)
  correctAnswer  Boolean
  quiz           Quiz    @relation(fields: [quizId], references: [idQuiz])
  quizId         Int
}

model StudentCourse {
  idStudentCourse Int         @id @default(autoincrement())
  student         StudentInfo @relation(fields: [studentId], references: [idStudent])
  studentId       Int
  course          Course      @relation(fields: [courseId], references: [idCourse])
  courseId        Int
  status          Status      @relation(fields: [statusId], references: [idStatus])
  statusId        Int
  createdAt       DateTime    @default(now())
  distributor     User        @relation(fields: [distributorId], references: [idUser])
  distributorId   Int
  discount        Float
}

model Status {
  idStatus      Int             @id @default(autoincrement())
  statusName    String          @db.VarChar(220)
  StudentCourse StudentCourse[]
}

model WatchVideos {
  idWatch   Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [idUser])
  userId    Int
  video     CourseVideo @relation(fields: [videoId], references: [idCourseVideo])
  videoId   Int
  createdAt DateTime    @default(now())
}

model CourseRating {
  idCourseRating Int      @id @default(autoincrement())
  course         Course   @relation(fields: [courseId], references: [idCourse])
  courseId       Int
  user           User     @relation(fields: [userId], references: [idUser])
  userId         Int
  rate           Int
  createdAt      DateTime @default(now())
}

model Group {
  idGroup      Int            @id @default(autoincrement())
  groupName    String         @db.VarChar(220)
  course       Course         @relation(fields: [courseId], references: [idCourse])
  courseId     Int
  createdAt    DateTime       @default(now())
  StudentGroup StudentGroup[]
}

model StudentGroup {
  idStudentGroup Int      @id @default(autoincrement())
  user           User     @relation(fields: [studentId], references: [idUser])
  studentId      Int
  group          Group    @relation(fields: [groupId], references: [idGroup])
  groupId        Int
  createdAt      DateTime @default(now())
}

model Setting {
  idSetting Int     @id @default(autoincrement())
  inReview  Boolean
  lang      String  @db.VarChar(220)
  version   String  @default("1.0.0") @db.VarChar(220)
}
